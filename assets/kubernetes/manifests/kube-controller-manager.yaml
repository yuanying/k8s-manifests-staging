---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: kube-controller-manager
  namespace: kube-system
  labels:
    app.kubernetes.io/component: kube-controller-manager
    app.kubernetes.io/instance: kube-controller-manager-porkadot
    app.kubernetes.io/managed-by: porkadot
    app.kubernetes.io/name: kube-controller-manager
    app.kubernetes.io/version: v1.21.3
    app.kubernetes.io/part-of: kubernetes
    k8s-app: kube-controller-manager
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: kube-controller-manager
      app.kubernetes.io/instance: kube-controller-manager-porkadot
      app.kubernetes.io/managed-by: porkadot
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: porkadot:kube-controller-manager
  labels:
    app.kubernetes.io/component: kube-controller-manager
    app.kubernetes.io/instance: kube-controller-manager-porkadot
    app.kubernetes.io/managed-by: porkadot
    app.kubernetes.io/name: kube-controller-manager
    app.kubernetes.io/version: v1.21.3
    app.kubernetes.io/part-of: kubernetes
    k8s-app: kube-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:kube-controller-manager
subjects:
- kind: ServiceAccount
  name: kube-controller-manager
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-controller-manager
  namespace: kube-system
  labels:
    app.kubernetes.io/component: kube-controller-manager
    app.kubernetes.io/instance: kube-controller-manager-porkadot
    app.kubernetes.io/managed-by: porkadot
    app.kubernetes.io/name: kube-controller-manager
    app.kubernetes.io/version: v1.21.3
    app.kubernetes.io/part-of: kubernetes
    k8s-app: kube-controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-controller-manager
  namespace: kube-system
  labels:
    app.kubernetes.io/component: kube-controller-manager
    app.kubernetes.io/instance: kube-controller-manager-porkadot
    app.kubernetes.io/managed-by: porkadot
    app.kubernetes.io/name: kube-controller-manager
    app.kubernetes.io/version: v1.21.3
    app.kubernetes.io/part-of: kubernetes
    k8s-app: kube-controller-manager
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: kube-controller-manager
      app.kubernetes.io/instance: kube-controller-manager-porkadot
      app.kubernetes.io/managed-by: porkadot
  template:
    metadata:
      labels:
        app.kubernetes.io/component: kube-controller-manager
        app.kubernetes.io/instance: kube-controller-manager-porkadot
        app.kubernetes.io/managed-by: porkadot
        app.kubernetes.io/name: kube-controller-manager
        app.kubernetes.io/version: v1.21.3
        app.kubernetes.io/part-of: kubernetes
        k8s-app: kube-controller-manager
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: 'app.kubernetes.io/component'
                  operator: In
                  values:
                  - kube-controller-manager
                - key: 'app.kubernetes.io/managed-by'
                  operator: In
                  values:
                  - porkadot
              topologyKey: kubernetes.io/hostname
      containers:
      - name: kube-controller-manager
        resources:
          requests:
            cpu: 200m
        image: k8s.gcr.io/kube-controller-manager:v1.21.3
        command:
        - kube-controller-manager
        - --allocate-node-cidrs=true
        - --cluster-cidr=10.244.0.0/16,fd49:d591:8c7e::/48
        - --cluster-signing-cert-file=/etc/kubernetes/pki/kubernetes/ca.crt
        - --cluster-signing-key-file=/etc/kubernetes/pki/kubernetes/ca.key
        - --controllers=*,bootstrapsigner,tokencleaner
        - --leader-elect=true
        - --root-ca-file=/etc/kubernetes/pki/kubernetes/ca.crt
        - --service-account-private-key-file=/etc/kubernetes/pki/kubernetes/sa.key
        - --service-cluster-ip-range=10.254.0.0/24,fd90:cca6:9762:96::/108
        - --use-service-account-credentials=true
        - --v=2
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10252  # Note: Using default port. Update if --port option is set differently.
          initialDelaySeconds: 15
          timeoutSeconds: 15
        volumeMounts:
        - name: var-run-kubernetes
          mountPath: /var/run/kubernetes
        - name: secrets
          mountPath: /etc/kubernetes/pki/kubernetes
          readOnly: true
        - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
          name: flexvolume-dir
        - mountPath: /usr/share/ca-certificates
          name: usr-share-ca-certificates
          readOnly: true
        - mountPath: /etc/ca-certificates
          name: etc-ca-certificates
          readOnly: true
        - mountPath: /etc/ssl/certs
          name: ca-certs
          readOnly: true
      priorityClassName: system-cluster-critical
      nodeSelector:
        k8s.unstable.cloud/master: ""
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: kube-controller-manager
      tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      volumes:
      - name: var-run-kubernetes
        emptyDir: {}
      - name: secrets
        secret:
          secretName: kube-controller-manager
      - hostPath:
          path: /etc/ssl/certs
          type: DirectoryOrCreate
        name: ca-certs
      - hostPath:
          path: /var/lib/kubelet/volumeplugins
          type: DirectoryOrCreate
        name: flexvolume-dir
      - hostPath:
          path: /usr/share/ca-certificates
          type: DirectoryOrCreate
        name: usr-share-ca-certificates
      - hostPath:
          path: /etc/ca-certificates
          type: DirectoryOrCreate
        name: etc-ca-certificates
      dnsPolicy: Default # Don't use cluster DNS.

